//http://blog.csdn.net/walkcode/article/details/10044601
//http://bubkoo.com/2014/01/14/sort-algorithm/insertion-sort/

//let lists = [703, 0, 677, 149, 671, 283, 992, 302, 3, 744, 741, 752, 784, 539, 61, 940, 700, 886, 128, 626, 381, 391, 353, 939, 907, 218, 860, 662, 853, 478, 876, 983, 782, 720, 503, 235, 243, 692, 2, 981, 300, 650, 25, 998, 591, 364, 635, 282, 798, 931, 765, 329, 396, 160, 643, 938, 946, 991, 716, 364, 578, 843, 238, 477, 772, 579, 543, 431, 841, 407, 648, 611, 956, 912, 798, 939, 703, 733, 419, 834, 474, 503, 996, 348, 254, 248, 568, 160, 531, 450, 927, 99, 94, 396, 36, 711, 735, 775, 120, 465, 429, 509, 877, 499, 860, 457, 34, 914, 380, 573, 455, 658, 911, 666, 257, 788, 64, 246, 553, 629, 450, 691, 319, 588, 107, 164, 24, 253, 898, 628, 584, 782, 48, 119, 184, 923, 442, 969, 617, 812, 607, 77, 237, 462, 333, 935, 353, 965, 190, 181, 566, 842, 296, 143, 595, 302, 621, 960, 379, 295, 764, 21, 952, 446, 317, 866, 133, 106, 209, 929, 792, 368, 7, 158, 262, 376, 966, 534, 143, 991, 663, 684, 622, 623, 192, 494, 77, 973, 431, 824, 42, 801, 479, 869, 671, 596, 213, 216, 740, 773, 952, 171, 710, 746, 181, 741, 61, 208, 345, 663, 196, 107, 982, 730, 785, 361, 524, 204, 773, 112, 166, 992, 271, 415, 463, 954, 779, 314, 805, 876, 40, 377, 474, 125, 636, 795, 50, 136, 189, 697, 26, 143, 186, 176, 370, 733, 257, 433, 850, 515, 196, 562, 546, 759, 139, 444, 56, 961, 884, 445, 647, 825, 604, 955, 787, 562, 862, 627, 600, 824, 936, 282, 965, 593, 32, 661, 238, 313, 686, 172, 353, 129, 774, 254, 661, 628, 637, 459, 82, 203, 475, 441, 661, 2, 58, 31, 122, 803, 262, 772, 760, 696, 819, 910, 287, 371, 631, 526, 522, 967, 983, 689, 124, 163, 562, 51, 507, 485, 977, 743, 990, 856, 186, 868, 608, 984, 532, 39, 716, 620, 930, 103, 946, 396, 47, 67, 165, 313, 921, 509, 406, 4, 117, 133, 282, 439, 152, 130, 595, 598, 443, 322, 928, 135, 977, 560, 363, 33, 256, 713, 24, 120, 654, 911, 995, 941, 446, 583, 415, 330, 820, 87, 375, 493, 158, 37, 455, 935, 624, 156, 647, 636, 295, 545, 550, 209, 122, 733, 555, 821, 819, 761, 610, 356, 134, 451, 201, 921, 350, 59, 529, 674, 888, 170, 228, 895, 591, 297, 654, 494, 793, 483, 305, 604, 339, 157, 815, 770, 931, 897, 322, 987, 795, 306, 62, 752, 359, 272, 653, 270, 807, 701, 830, 7, 187, 484, 539, 545, 961, 279, 784, 359, 189, 619, 264, 713, 133, 881, 362, 639, 804, 733, 19, 103, 887, 216, 346, 335, 433, 885, 434, 127, 810, 197, 124, 548, 737, 692, 506, 764, 98, 726, 25, 998, 437, 876, 832, 1, 276, 131, 44, 982, 228, 300, 89, 788, 250, 99, 829, 899, 461, 650, 781, 691, 423, 302, 559, 839, 673, 877, 860, 512, 39, 945, 523, 34, 70, 548, 252, 161, 658, 264, 301, 294, 334, 3, 449, 441, 258, 839, 152, 502, 749, 548, 933, 443, 563, 996, 158, 16, 596, 341, 25, 222, 199, 879, 823, 101, 179, 331, 812, 972, 608, 582, 524, 56, 20, 459, 842, 992, 317, 401, 132, 682, 916, 909, 666, 129, 733, 294, 530, 908, 44, 787, 428, 435, 805, 215, 29, 811, 190, 642, 829, 678, 173, 348, 613, 507, 941, 512, 618, 480, 930, 56, 303, 694, 319, 184, 623, 320, 587, 511, 487, 607, 857, 907, 958, 597, 537, 469, 948, 924, 770, 642, 188, 361, 931, 910, 550, 779, 375, 262, 131, 340, 822, 854, 785, 722, 578, 250, 133, 611, 541, 390, 849, 558, 928, 320, 271, 306, 214, 707, 533, 826, 264, 357, 870, 870, 428, 988, 696, 506, 724, 159, 771, 802, 923, 503, 667, 26, 473, 968, 682, 779, 776, 699, 437, 184, 721, 554, 992, 455, 715, 76, 365, 423, 819, 550, 76, 198, 331, 919, 297, 317, 986, 273, 16, 703, 392, 505, 572, 787, 666, 421, 255, 576, 448, 810, 498, 547, 439, 905, 798, 598, 812, 933, 864, 389, 972, 213, 185, 317, 944, 901, 244, 114, 96, 980, 626, 423, 529, 602, 133, 707, 255, 257, 111, 829, 318, 963, 656, 104, 289, 505, 205, 502, 525, 822, 25, 921, 552, 272, 385, 1, 512, 871, 709, 766, 976, 552, 614, 823, 214, 984, 35, 911, 769, 495, 668, 596, 895, 715, 965, 987, 265, 263, 566, 794, 371, 154, 585, 760, 671, 979, 808, 406, 400, 92, 737, 122, 807, 270, 101, 395, 668, 773, 457, 87, 670, 666, 482, 48, 951, 52, 909, 31, 297, 169, 597, 359, 962, 844, 654, 60, 585, 320, 326, 944, 254, 348, 310, 360, 310, 476, 200, 989, 884, 895, 990, 706, 97, 152, 390, 856, 451, 373, 322, 482, 964, 976, 439, 542, 234, 263, 118, 595, 1, 615, 980, 312, 17, 984, 596, 437, 44, 308, 883, 109, 240, 572, 547, 422, 291, 118, 643, 475, 303, 976, 95, 937, 449, 978, 548, 95, 366, 627, 428, 943, 147, 648, 804, 480, 1, 961, 266, 567, 43, 260, 579, 454, 843, 808, 880, 367, 759, 460, 624, 525, 842, 673, 625, 784, 291, 377, 509, 847, 624, 903, 693, 289, 953, 397, 871, 31, 310, 362, 404, 972, 918, 914, 112, 110, 84, 169, 708, 137, 510, 364, 773, 608, 729, 288, 783, 292, 567, 802, 711, 757, 682, 353, 897, 444, 18, 760, 577, 909, 723, 243, 18, 564, 80, 810, 214, 368, 756, 884, 348, 31, 890, 616, 169, 271, 547, 807, 727, 466, 660, 125, 974, 248, 225, 875, 343, 537, 930, 333, 1, 271, 423, 483, 354, 104, 0, 867, 196, 3, 715, 177, 604, 311, 795, 747, 224, 281, 541, 577, 917, 747, 780, 856, 924, 701, 883, 777, 461, 93, 46, 333, 569, 227, 627, 991, 690, 793, 360, 527, 459, 316, 744, 500];
//let lists = [4, 54, 23, 96, 31, 46, 34, 2, 8, 5, 213, 42, 3, 12, 6,];
let lists = [];
for(let i=0;i<100000;i++){
    lists.push(Math.floor(Math.random()*1000));
}
function method1(lists) {
    console.time('method 1');
    for (let i = 0; i < lists.length; i++) {
        for (let j = i + 1; j < lists.length; j++) {
            if (lists[i] > lists[j]) {
                let temp = lists[i];
                lists[i] = lists[j];
                lists[j] = temp;
            }
        }
    }
    console.timeEnd('method 1');
}

function method2(lists) {
    console.time('method 2');
    for (let i = 0; i < lists.length; i++) {
        let minIndex = i;
        let minValue = lists[i];
        for (let j = minIndex + 1; j < lists.length; j++) {
            if (minValue > lists[j]) {
                minIndex = j;
                minValue = lists[j];
            }
        }
        let temp = lists[i];
        lists[i] = minValue;
        lists[minIndex] = temp;
    }
    console.timeEnd('method 2');
}

function method3(lists) {
    console.time('method 3');
    for (let i = 1; i < lists.length; i++) {
        let insertValue = lists[i];
        let insertIndex = i - 1; // 从插入值前面的一个数算起
        while (insertIndex >= 0 && lists[insertIndex] > insertValue) { //排序数列中每个元素和插入之对比
            lists[insertIndex + 1] = lists[insertIndex]; // 如果比插入数大，元素向后移一位
            insertIndex--;
        }

        if (i != insertIndex + 1) { // 说明排序数列中有元素移动过了，那么插入值必须插入到移动的位置上
            lists[insertIndex + 1] = insertValue; // 需要加1，补回while loop里面insertIndex--
        }
    }
    console.timeEnd('method 3');
}

function method4(lists) {
    console.time('method 4');
    for (let i = 1; i < lists.length; i++) {
        let insertValue = lists[i];
        let insertIndex = binarySearch(lists, 0, i - 1, insertValue);
        for (let j = i; j > insertIndex; j--) {
            lists[j] = lists[j - 1];
        }
        lists[insertIndex] = insertValue;
    }

    function binarySearch(arr, start, end, val) {
        while (start <= end) {
            let middle = Math.floor((start + end) / 2);
            if (arr[middle] < val) {
                if (val <= arr[middle + 1]) {
                    return middle + 1; // middel + 1 it's the next element after middle element in the sorted sequence, it can also be val itself
                } else {
                    start = middle + 1;
                }
            } else {
                if (end === 0) { // This is true when val is the most smallest value in the sorted sequence
                    return 0;
                } else {
                    end = middle;
                }
            }
        }
    }
    console.timeEnd('method 4');
}
//console.log(lists);
method1(lists.slice());
method2(lists.slice());
method3(lists.slice());
method4(lists.slice());